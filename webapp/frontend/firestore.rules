rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidUser(data) {
      return data.keys().hasAll(['uid', 'gender', 'age', 'username', 'preferences', 'isAnonymous', 'createdAt', 'lastActive']) &&
             data.uid is string &&
             data.gender is string &&
             data.age is number &&
             data.username is string &&
             data.preferences is list &&
             data.isAnonymous is bool &&
             data.createdAt is timestamp &&
             data.lastActive is timestamp &&
             data.age >= 18 && data.age <= 100 &&
             data.username.size() >= 3 && data.username.size() <= 20 &&
             data.preferences.size() <= 10;
    }
    
    function isValidUserUpdate(data) {
      return data.keys().hasAny(['gender', 'age', 'username', 'preferences', 'lastActive', 'email', 'displayName', 'photoURL']) &&
             (!('age' in data) || (data.age is number && data.age >= 18 && data.age <= 100)) &&
             (!('username' in data) || (data.username is string && data.username.size() >= 3 && data.username.size() <= 20)) &&
             (!('preferences' in data) || (data.preferences is list && data.preferences.size() <= 10)) &&
             (!('gender' in data) || data.gender is string);
    }
    
    function isRecentlyActive() {
      return isAuthenticated() && 
             request.auth.token.auth_time > (timestamp.now() - duration.value(30, 'm'));
    }

    // Users collection rules
    match /users/{userId} {
      // Allow users to read their own profile and any user's basic profile info
      allow read: if isOwner(userId) || 
                     (isAuthenticated() && 
                      resource.data.keys().hasAny(['username', 'age', 'gender', 'preferences', 'lastActive']));
      
      // Allow users to create their own profile (anonymous or authenticated)
      allow create: if isOwner(userId) && 
                       isValidUser(request.resource.data) &&
                       request.resource.data.uid == userId;
      
      // Allow users to update their own profile
      allow update: if isOwner(userId) && 
                       isValidUserUpdate(request.resource.data) &&
                       // Prevent changing critical fields after creation
                       !request.resource.data.diff(resource.data).affectedKeys().hasAny(['uid', 'createdAt']);
      
      // Allow users to delete their own profile (anonymous users only)
      allow delete: if isOwner(userId) && 
                       resource.data.isAnonymous == true;
    }

    // Chat rooms collection
    match /chatRooms/{roomId} {
      // Allow authenticated users to read chat rooms
      allow read: if isAuthenticated();
      
      // Allow authenticated users to create chat rooms
      allow create: if isAuthenticated() && 
                       request.resource.data.keys().hasAll(['name', 'createdBy', 'createdAt', 'isActive']) &&
                       request.resource.data.createdBy == request.auth.uid &&
                       request.resource.data.name is string &&
                       request.resource.data.name.size() >= 3 && request.resource.data.name.size() <= 50 &&
                       request.resource.data.createdAt is timestamp &&
                       request.resource.data.isActive is bool;
      
      // Allow room creators to update their rooms
      allow update: if isAuthenticated() && 
                       resource.data.createdBy == request.auth.uid &&
                       request.resource.data.keys().hasAny(['name', 'isActive', 'updatedAt']);

      // Chat messages subcollection
      match /messages/{messageId} {
        // Allow authenticated users to read messages in rooms they have access to
        allow read: if isAuthenticated();
        
        // Allow authenticated users to create messages
        allow create: if isAuthenticated() && 
                         request.resource.data.keys().hasAll(['userId', 'username', 'message', 'timestamp', 'type']) &&
                         request.resource.data.userId == request.auth.uid &&
                         request.resource.data.message is string &&
                         request.resource.data.message.size() <= 500 &&
                         request.resource.data.username is string &&
                         request.resource.data.timestamp is timestamp &&
                         request.resource.data.type in ['text', 'emoji', 'system'];
        
        // Allow users to update their own messages (edit functionality)
        allow update: if isAuthenticated() && 
                         resource.data.userId == request.auth.uid &&
                         request.resource.data.keys().hasAny(['message', 'editedAt']) &&
                         // Prevent changing core message data
                         !request.resource.data.diff(resource.data).affectedKeys().hasAny(['userId', 'username', 'timestamp', 'type']);
        
        // Allow users to delete their own messages
        allow delete: if isAuthenticated() && 
                         resource.data.userId == request.auth.uid;
      }
    }

    // Posts collection (for social feed)
    match /posts/{postId} {
      // Allow authenticated users to read posts
      allow read: if isAuthenticated();
      
      // Allow authenticated users to create posts
      allow create: if isAuthenticated() && 
                       request.resource.data.keys().hasAll(['userId', 'username', 'content', 'timestamp', 'likes']) &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.content is string &&
                       request.resource.data.content.size() <= 1000 &&
                       request.resource.data.username is string &&
                       request.resource.data.timestamp is timestamp &&
                       request.resource.data.likes is number &&
                       request.resource.data.likes == 0;
      
      // Allow users to update their own posts
      allow update: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAny(['content', 'editedAt']);
      
      // Allow users to delete their own posts
      allow delete: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid;

      // Comments subcollection
      match /comments/{commentId} {
        // Allow authenticated users to read comments
        allow read: if isAuthenticated();
        
        // Allow authenticated users to create comments
        allow create: if isAuthenticated() && 
                         request.resource.data.keys().hasAll(['userId', 'username', 'content', 'timestamp', 'likes']) &&
                         request.resource.data.userId == request.auth.uid &&
                         request.resource.data.content is string &&
                         request.resource.data.content.size() <= 500 &&
                         request.resource.data.username is string &&
                         request.resource.data.timestamp is timestamp &&
                         request.resource.data.likes is number &&
                         request.resource.data.likes == 0;
        
        // Allow users to update their own comments
        allow update: if isAuthenticated() && 
                         resource.data.userId == request.auth.uid &&
                         request.resource.data.keys().hasAny(['content', 'editedAt']);
        
        // Allow users to delete their own comments
        allow delete: if isAuthenticated() && 
                         resource.data.userId == request.auth.uid;

        // Replies subcollection
        match /replies/{replyId} {
          // Allow authenticated users to read replies
          allow read: if isAuthenticated();
          
          // Allow authenticated users to create replies
          allow create: if isAuthenticated() && 
                           request.resource.data.keys().hasAll(['userId', 'username', 'content', 'timestamp', 'likes']) &&
                           request.resource.data.userId == request.auth.uid &&
                           request.resource.data.content is string &&
                           request.resource.data.content.size() <= 500 &&
                           request.resource.data.username is string &&
                           request.resource.data.timestamp is timestamp &&
                           request.resource.data.likes is number &&
                           request.resource.data.likes == 0;
          
          // Allow users to update their own replies
          allow update: if isAuthenticated() && 
                           resource.data.userId == request.auth.uid &&
                           request.resource.data.keys().hasAny(['content', 'editedAt']);
          
          // Allow users to delete their own replies
          allow delete: if isAuthenticated() && 
                           resource.data.userId == request.auth.uid;
        }
      }
    }

    // User interactions (likes, matches, etc.)
    match /interactions/{interactionId} {
      // Allow users to read their own interactions
      allow read: if isAuthenticated() && 
                     (resource.data.fromUserId == request.auth.uid || 
                      resource.data.toUserId == request.auth.uid);
      
      // Allow users to create interactions
      allow create: if isAuthenticated() && 
                       request.resource.data.keys().hasAll(['fromUserId', 'toUserId', 'type', 'timestamp']) &&
                       request.resource.data.fromUserId == request.auth.uid &&
                       request.resource.data.toUserId != request.auth.uid &&
                       request.resource.data.type in ['like', 'match', 'chat_request', 'block'] &&
                       request.resource.data.timestamp is timestamp;
      
      // Allow users to update their own interactions
      allow update: if isAuthenticated() && 
                       resource.data.fromUserId == request.auth.uid &&
                       request.resource.data.keys().hasAny(['status', 'updatedAt']);
      
      // Allow users to delete their own interactions
      allow delete: if isAuthenticated() && 
                       resource.data.fromUserId == request.auth.uid;
    }

    // Private messages collection
    match /privateMessages/{conversationId} {
      // Allow users to read conversations they're part of
      allow read: if isAuthenticated() && 
                     request.auth.uid in resource.data.participants;
      
      // Allow users to create private conversations
      allow create: if isAuthenticated() && 
                       request.resource.data.keys().hasAll(['participants', 'createdAt', 'lastMessageAt']) &&
                       request.auth.uid in request.resource.data.participants &&
                       request.resource.data.participants.size() == 2;
      
      // Allow participants to update conversation metadata
      allow update: if isAuthenticated() && 
                       request.auth.uid in resource.data.participants;

      // Private messages subcollection
      match /messages/{messageId} {
        // Allow participants to read messages
        allow read: if isAuthenticated() && 
                       request.auth.uid in get(/databases/$(database)/documents/privateMessages/$(conversationId)).data.participants;
        
        // Allow participants to create messages
        allow create: if isAuthenticated() && 
                         request.auth.uid in get(/databases/$(database)/documents/privateMessages/$(conversationId)).data.participants &&
                         request.resource.data.keys().hasAll(['userId', 'username', 'message', 'timestamp']) &&
                         request.resource.data.userId == request.auth.uid &&
                         request.resource.data.message is string &&
                         request.resource.data.message.size() <= 1000;
        
        // Allow users to delete their own messages
        allow delete: if isAuthenticated() && 
                         resource.data.userId == request.auth.uid;
      }
    }

    // Anonymous user cleanup (for maintenance)
    match /cleanupTasks/{taskId} {
      // Only allow system/admin access (this would be handled by Firebase Functions)
      allow read, write: if false;
    }

    // Deny all other document access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}