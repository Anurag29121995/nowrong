NoWrong Webapp - Complete Architecture Documentation
===========================================================

TABLE OF CONTENTS
- Overview
- Tech Stack
- Project Structure
- Application Flow
- Pages & Components
- Data Models
- User Journey
- Navigation System
- State Management
- Profile System
- Chat System
- Styling & Design
- Configuration
- Build & Deployment

OVERVIEW
========

NoWrong is an anonymous intimate chat application built with Next.js 15, React, and TypeScript. The app facilitates anonymous conversations between users with similar interests, featuring a comprehensive onboarding flow, profile creation, chat lobbies, and real-time messaging capabilities.

Core Features:
- Multi-step onboarding with explicit user preferences
- Anonymous profile creation and viewing
- Real-time chat interface with WhatsApp-like experience
- Mobile-first responsive design
- Dark theme with pink accent colors
- Privacy-focused anonymous interactions

TECH STACK
===========

Frontend Framework:
- Next.js 15.5.3 - React framework with App Router
- React 19.0.0 - UI library with latest features
- TypeScript - Type safety and better development experience

Styling & Animation:
- Tailwind CSS - Utility-first CSS framework
- Framer Motion - Animation library for smooth transitions
- Custom CSS Variables - Brand-consistent color system

Development Tools:
- ESLint - Code linting and quality
- Next.js ESLint Config - Framework-specific linting rules
- TypeScript - Static type checking

PROJECT STRUCTURE
==================

webapp/frontend/
├── src/app/
│   ├── components/           # Reusable UI components
│   │   ├── AgeSelection.tsx
│   │   ├── Avatar.tsx
│   │   ├── AvatarSelection.tsx
│   │   ├── ChatInterface.tsx
│   │   ├── ChatLobby.tsx
│   │   ├── ChatRoom.tsx
│   │   ├── GenderSelection.tsx
│   │   ├── PostsFeed.tsx
│   │   ├── PreferencesSelection.tsx
│   │   ├── ProfileCreation.tsx
│   │   ├── ProfileScreen.tsx
│   │   ├── ProfileViewer.tsx
│   │   └── UsernameSelection.tsx
│   ├── config/
│   │   └── brand.ts          # Brand configuration and constants
│   ├── onboarding/
│   │   └── page.tsx          # Multi-step onboarding flow
│   ├── globals.css           # Global styles and CSS variables
│   ├── layout.tsx            # Root layout component
│   └── page.tsx              # Home page (redirects to onboarding)
├── public/                   # Static assets
│   ├── Auth Screen Image.png
│   └── nowrong-icon.png
├── package.json              # Dependencies and scripts
├── tailwind.config.ts        # Tailwind CSS configuration
├── tsconfig.json             # TypeScript configuration
└── next.config.mjs           # Next.js configuration

APPLICATION FLOW
================

1. Entry Point (/)
File: src/app/page.tsx
- Purpose: Landing page that immediately redirects users to onboarding
- Behavior: Uses useRouter().push('/onboarding') on mount
- UI: Shows loading state with NoWrong branding during redirect

2. Onboarding Flow (/onboarding)
File: src/app/onboarding/page.tsx
- Purpose: Multi-step user preference collection
- Steps: Gender → Age → Username → Preferences → Chat Lobby
- State Management: Centralized form data with step progression

PAGES & COMPONENTS
==================

Core Pages:

1. Root Layout (layout.tsx)
interface RootLayout {
  metadata: {
    title: 'NoWrong - Anonymous Intimate Chat'
    description: 'Connect anonymously with like-minded people'
    themeColor: '#BE185D'
  }
  viewport: 'device-width, initial-scale=1'
  font: 'Inter (Google Fonts)'
  className: 'bg-black text-white min-h-screen'
}

2. Home Page (page.tsx)
interface HomePage {
  purpose: 'Redirect to onboarding'
  redirect: '/onboarding'
  fallbackUI: 'NoWrong loading screen'
}

3. Onboarding Page (onboarding/page.tsx)
interface OnboardingPage {
  steps: ['gender', 'age', 'username', 'preferences']
  currentStep: Step
  formData: OnboardingFormData
  isOnboardingComplete: boolean
  
  handlers: {
    handleNext: (data: Partial<OnboardingFormData>) => void
    handleBack: () => void
    handleBackFromChat: () => void
  }
}

type Step = 'gender' | 'age' | 'username' | 'preferences'

interface OnboardingFormData {
  gender?: string
  age?: number
  interest?: string
  username?: string
  preferences?: string[]
  avatar?: string
}

Component Architecture:

1. Gender Selection (GenderSelection.tsx)
interface GenderSelectionProps {
  onNext: (data: {gender: string, interest: string}) => void
  onBack: () => void
  canGoBack: boolean
  formData: OnboardingFormData
}

Features:
- Gender selection (Male/Female/Other)
- Interest selection (Men/Women/Both)
- Animated gender icons
- Form validation
- Background image on gender step only

2. Age Selection (AgeSelection.tsx)
interface AgeSelectionProps {
  onNext: (data: {age: number}) => void
  onBack: () => void
  canGoBack: boolean
  formData: OnboardingFormData
}

Features:
- Age range slider (18-65+)
- Real-time age display
- Visual age representation
- Minimum age validation (18+)

3. Username Selection (UsernameSelection.tsx)
interface UsernameSelectionProps {
  onNext: (data: {username: string, avatar: string}) => void
  onBack: () => void
  canGoBack: boolean
  formData: OnboardingFormData
}

Features:
- Custom username input
- Gender-specific username suggestions
- Avatar generation based on username
- Username validation (length, characters)
- Suggestion system from brand.ts

4. Preferences Selection (PreferencesSelection.tsx)
interface PreferencesSelectionProps {
  onNext: (data: {preferences: string[]}) => void
  onBack: () => void
  canGoBack: boolean
  formData: OnboardingFormData
}

Features:
- Multiple preference categories
- Multi-select checkboxes
- Visual preference icons
- Validation (minimum selections)
- Detailed preference options

5. Chat Lobby (ChatLobby.tsx)
interface ChatLobbyProps {
  formData: OnboardingFormData
  onBack: () => void
}

Features:
- Online user count display
- Chat room navigation options
- User profile preview
- Room selection interface
- Social feed integration

6. Chat Room (ChatRoom.tsx)
interface ChatRoomProps {
  onBack: () => void
  userProfile: UserProfile
}

Features:
- Real-time message interface
- Online users list
- WhatsApp-like design
- Message input with emoji support
- User interaction capabilities

7. Profile Viewer (ProfileViewer.tsx)
interface ProfileViewerProps {
  user?: User
  profile?: ProfileData
  onBack: () => void
  onStartChat?: () => void
  showBackButton?: boolean
}

interface ProfileData {
  username: string
  age: number
  gender: 'male' | 'female'
  secret?: string
  showSecret?: boolean
  bodyTypePreference?: string
  location?: string
  bodyCount?: number
  moments?: string[]
}

Features:
- Complete user profile display
- Body count visualization with gender-specific icons
- Turn-on preferences with visual representations
- Secret confession display
- Sneak peek photo gallery
- Interactive profile elements

8. Posts Feed (PostsFeed.tsx)
interface PostsFeedProps {
  onBack: () => void
}

Features:
- Facebook-style comment system
- Nested reply functionality
- Like/reaction system
- User interaction
- Real-time updates
- Clickable usernames for profile navigation

DATA MODELS
===========

User Profile Model:
interface User {
  id: string
  username: string
  age: number
  gender: 'male' | 'female'
  location: string
  isOnline: boolean
  lastSeen: string
  preferences: string[]
  bodyType: string
  secretMessage: string
  bodyCount: number
  turnOns: string[]
}

Chat Message Model:
interface ChatMessage {
  id: string
  userId: string
  username: string
  message: string
  timestamp: Date
  type: 'text' | 'emoji' | 'system'
}

Comment System Model:
interface Comment {
  id: number | string
  username: string
  content: string
  timestamp: string
  likes: number
  replies?: Comment[]
}

USER JOURNEY
============

Complete Flow Diagram:

1. App Launch (/)
   ↓ (Auto redirect)
   
2. Onboarding Start (/onboarding)
   ├── Step 1: Gender Selection
   │   ├── Choose gender (Male/Female/Other)
   │   └── Choose interest (Men/Women/Both)
   ↓
   ├── Step 2: Age Selection
   │   └── Select age (18-65+ slider)
   ↓
   ├── Step 3: Username Creation
   │   ├── Enter custom username
   │   ├── View suggestions based on gender
   │   └── Generate avatar
   ↓
   └── Step 4: Preferences Selection
       ├── Select multiple interests
       ├── Choose body type preferences
       └── Set interaction preferences
   ↓
   
3. Chat Lobby
   ├── View online user count
   ├── Browse available chat rooms
   ├── View posts feed
   └── Access profile settings
   ↓
   
4. Chat Room
   ├── Real-time messaging
   ├── View online users
   ├── Access user profiles
   └── Private conversations
   ↓
   
5. Profile Interactions
   ├── View detailed profiles
   ├── See body count visualizations
   ├── Read secret confessions
   ├── Browse photo galleries
   └── Start private chats

Navigation Patterns:
// Primary Navigation Flow
HomePage → OnboardingPage → ChatLobby → ChatRoom
              ↓
         ProfileViewer ←→ PostsFeed

// Back Navigation
- Each step has back button (except first step)
- Modal close buttons return to previous context
- Breadcrumb navigation in complex flows

NAVIGATION SYSTEM
=================

Route Structure:
interface RouteStructure {
  '/': 'Home page (redirects to /onboarding)'
  '/onboarding': 'Multi-step onboarding flow'
}

Internal Navigation (Modal-based):
interface ModalNavigation {
  chatLobby: 'Main hub after onboarding'
  chatRoom: 'Real-time chat interface'
  profileViewer: 'Detailed user profiles'
  postsFeed: 'Social media feed'
  profileCreation: 'Extended profile setup'
}

Navigation Controls:
interface NavigationControls {
  progressBar: 'Shows completion percentage in onboarding'
  stepIndicators: 'Dots showing current step'
  backButtons: 'Return to previous step/modal'
  closeButtons: 'Exit current modal/flow'
  contextualNavigation: 'Smart navigation based on user state'
}

STATE MANAGEMENT
================

Onboarding State:
interface OnboardingState {
  currentStep: Step
  formData: OnboardingFormData
  isOnboardingComplete: boolean
  
  // Methods
  handleNext: (data) => void
  handleBack: () => void
  setCurrentStep: (step) => void
  updateFormData: (data) => void
}

Chat State:
interface ChatState {
  messages: ChatMessage[]
  onlineUsers: User[]
  currentUser: User
  selectedRoom: string
  
  // Methods
  sendMessage: (message) => void
  joinRoom: (roomId) => void
  viewProfile: (userId) => void
}

Profile State:
interface ProfileState {
  currentProfile: ProfileData
  viewingUser: User | null
  showSecret: boolean
  
  // Methods
  loadProfile: (userId) => void
  toggleSecret: () => void
  startChat: () => void
}

PROFILE SYSTEM
==============

Profile Creation Flow:
interface ProfileCreationFlow {
  // Basic Info (from onboarding)
  username: string
  age: number
  gender: 'male' | 'female'
  preferences: string[]
  
  // Extended Info (collected in profile creation)
  location?: string
  bodyCount?: number
  bodyType?: string
  secretMessage?: string
  moments?: File[]
  
  // Generated Data
  avatar: string  // Generated from username
  id: string      // Unique identifier
  isOnline: boolean
  lastSeen: Date
}

Profile Display Components:

Body Count Visualization:
interface BodyCountDisplay {
  count: number
  maxDisplay: 12  // Show up to 12 figures
  genderBasedFigures: {
    male: 'Blue stick figures'
    female: 'Pink stick figures with curves'
    mixed: 'Alternating based on user preference'
  }
  overflowDisplay: '+N' // For counts > 12
}

Turn-On Preferences:
interface TurnOnDisplay {
  bodyTypePreference: {
    'petite': {name: 'Petite & Slim', description: 'Skinny, tight, small'}
    'curvy': {name: 'Thick & Curvy', description: 'Voluptuous hourglass'}
    'bbw': {name: 'BBW Goddess', description: 'Big, beautiful, soft'}
    'athletic': {name: 'Fit & Toned', description: 'Strong, defined'}
    'milf': {name: 'MILF Appeal', description: 'Mature, experienced'}
    'busty': {name: 'Big Boobs', description: 'Large breasts, sexy'}
    'muscular': {name: 'Muscular & Ripped', description: 'Strong, defined'}
    'tall_lean': {name: 'Tall & Lean', description: 'Height, slim'}
    'dad_bod': {name: 'Dad Bod', description: 'Soft, comfortable'}
    'bearded': {name: 'Bearded & Rugged', description: 'Masculine, facial hair'}
    'young_fit': {name: 'Young & Fit', description: 'Youthful, energetic'}
    'big_package': {name: 'Well Endowed', description: 'Impressive size'}
  }
  visualRepresentation: 'SVG body type illustrations'
}

Secret Confessions:
interface SecretConfession {
  message: string
  isPrivate: boolean
  displayStyle: 'Italic text with special styling'
  accessControl: 'Visible to matched users only'
}

Photo Gallery (Sneak Peek):
interface PhotoGallery {
  moments: string[]  // Image URLs
  maxPreview: 3      // Show 3 preview images
  placeholders: 'Dashed border empty slots'
  fullGallery: 'Expandable view for all photos'
}

CHAT SYSTEM
===========

Chat Interface Architecture:
interface ChatInterface {
  design: 'WhatsApp-inspired messaging UI'
  features: {
    messageInput: 'Expandable text area'
    sendButton: 'Disabled when empty, pink when active'
    messageHistory: 'Scrollable message list'
    userIcons: 'Avatar-based sender identification'
    timestamps: 'Message time display'
    onlineIndicators: 'User status indicators'
  }
}

Message Types:
interface MessageTypes {
  text: 'Standard text messages'
  emoji: 'Emoji-only messages'
  system: 'Join/leave notifications'
  private: 'Direct messages between users'
}

Online Users Display:
interface OnlineUsersDisplay {
  layout: 'Horizontal scrollable list'
  userInfo: {
    avatar: 'Generated avatar image'
    username: 'Display name'
    onlineStatus: 'Green dot indicator'
    clickAction: 'Open profile viewer'
  }
  maxVisible: 'Responsive based on screen size'
}

Comment System (Posts Feed):
interface CommentSystem {
  features: {
    nestedReplies: 'Threaded conversation support'
    userInteraction: 'Clickable usernames → profile view'
    reactions: 'Like/love reactions'
    timestamps: 'Relative time display'
    sendBehavior: 'Muted send button when empty'
    replySystem: 'In-line reply functionality'
  }
  
  dataStructure: {
    comments: Comment[]
    replies: {[commentId: string]: Comment[]}
    staticComments: 'Mock data for demonstration'
    dynamicComments: 'User-generated content'
  }
}

STYLING & DESIGN
================

Design System:
interface DesignSystem {
  colorPalette: {
    primary: '#BE185D'        // Pink brand color
    secondary: '#881337'      // Dark pink
    accent: '#F43F5E'        // Light pink
    background: '#000000'     // Pure black
    surface: 'rgba(0,0,0,0.2)' // Glass effect
    text: {
      primary: '#FFFFFF'      // White
      secondary: '#E8E8E8'    // Light gray
      muted: '#B0B0B0'       // Medium gray
      dim: '#808080'         // Dark gray
    }
  }
  
  typography: {
    fontFamily: 'Inter (Google Fonts)'
    brand: {
      gradient: 'Pink to rose gradient'
      animation: 'Gradient shift animation'
      symbol: '✦ decorative sparkle'
    }
  }
  
  effects: {
    glassmorphism: 'backdrop-blur with transparency'
    gradients: 'Pink/rose color gradients'
    animations: 'Smooth transitions with Framer Motion'
    shadows: 'Subtle drop shadows'
  }
}

Responsive Design:
interface ResponsiveDesign {
  breakpoints: {
    mobile: '< 768px'
    tablet: '768px - 1024px'
    desktop: '> 1024px'
  }
  
  mobileFirst: 'Design optimized for mobile experience'
  adaptiveUI: {
    navigation: 'Collapsible menus'
    profileViewer: 'Stack layout on mobile'
    chatInterface: 'Full-screen on mobile'
    onboarding: 'Single column layout'
  }
}

Animation System:
interface AnimationSystem {
  library: 'Framer Motion'
  patterns: {
    pageTransitions: 'Slide in/out animations'
    modalAnimations: 'Scale and fade effects'
    buttonHovers: 'Subtle scale and color changes'
    stepProgression: 'Progress bar animations'
    cardInteractions: 'Lift and shadow effects'
  }
  
  customAnimations: {
    gradientShift: 'Brand text animation (4s loop)'
    sparkle: 'Decorative symbol animation (3s loop)'
    breathe: 'Background mesh animation (8s loop)'
  }
}

CONFIGURATION
=============

Brand Configuration (config/brand.ts):
interface BrandConfig {
  identity: {
    name: 'NoWrong'
    tagline: 'Anonymous Intimate Conversations'
  }
  
  logo: {
    sizes: {sm: '32px', md: '36px', lg: '40px'}
    gradient: 'Pink to rose'
    borderRadius: 'rounded-xl'
  }
  
  typography: {
    fontFamily: 'Inter'
    fontWeight: 'normal (400)'
    letterSpacing: '2px'
    gradientAnimation: 'animate-gradient-shift'
  }
  
  colors: {
    primary: 'Pink color palette (50-900)'
    secondary: 'Rose color variations'
    glass: 'Transparency levels'
  }
  
  components: {
    card: 'Glass effect styling'
    button: 'Primary/secondary button styles'
  }
  
  animations: {
    cardHover: 'Scale and translate effects'
    slideIn: 'Page transition animations'
    fadeIn: 'Element appearance animations'
  }
}

Username Suggestions System:
interface UsernameSuggestions {
  male: {
    prefixes: ['Alpha', 'King', 'Master', 'Boss', 'Stud', 'Beast', 'Wild', 'Dark']
    suffixes: ['Wolf', 'King', 'Beast', 'Stud', 'Master', 'Dom', 'Bull', 'Tiger']
    adjectives: ['Strong', 'Bold', 'Wild', 'Hard', 'Deep', 'Raw', 'Tough', 'Hot']
  }
  
  female: {
    prefixes: ['Queen', 'Goddess', 'Lady', 'Princess', 'Sexy', 'Wild', 'Hot', 'Sweet']
    suffixes: ['Queen', 'Goddess', 'Babe', 'Girl', 'Angel', 'Star', 'Cat', 'Fox']
    adjectives: ['Sexy', 'Sweet', 'Wild', 'Hot', 'Soft', 'Pink', 'Cute', 'Juicy']
  }
  
  other: {
    prefixes: ['Wild', 'Dark', 'Free', 'Pure', 'Sweet', 'Hot', 'Cool', 'Mystic']
    suffixes: ['Soul', 'Heart', 'Spirit', 'Fire', 'Star', 'Moon', 'Dream', 'Vibe']
    adjectives: ['Wild', 'Free', 'Bold', 'Pure', 'Cool', 'Warm', 'Soft', 'Bright']
  }
  
  generation: 'Random combination of prefix + adjective + suffix'
}

BUILD & DEPLOYMENT
==================

Build Process:
interface BuildProcess {
  development: {
    command: 'npm run dev'
    port: 3000
    features: {
      hotReload: 'Instant updates on code changes'
      typeChecking: 'Real-time TypeScript validation'
      eslinting: 'Code quality checks'
    }
  }
  
  production: {
    command: 'npm run build'
    output: '.next/ directory'
    optimizations: {
      codesplitting: 'Automatic bundle optimization'
      imageOptimization: 'Next.js image optimization'
      cssMinification: 'Tailwind CSS purging'
      typeChecking: 'Build-time validation'
    }
  }
}

Performance Optimization:
interface PerformanceOptimization {
  bundleSize: {
    mainApp: '175 kB (onboarding page)'
    homepage: '102 kB (minimal redirect)'
    notFound: '103 kB (error page)'
  }
  
  loadingStrategy: {
    staticGeneration: 'Pre-rendered pages'
    dynamicImports: 'Component-level code splitting'
    imageOptimization: 'WebP conversion and sizing'
  }
  
  caching: {
    staticAssets: 'Immutable caching for images/fonts'
    apiResponses: 'Strategic caching for user data'
    buildArtifacts: 'Optimized build caching'
  }
}

PRIVACY & SECURITY
==================

Anonymous Architecture:
interface AnonymousArchitecture {
  userIdentification: {
    noEmailRequired: 'No email collection'
    noPhoneRequired: 'No phone verification'
    temporaryIds: 'Session-based identification'
    usernameOnly: 'Display name system only'
  }
  
  dataHandling: {
    localStorageOnly: 'Client-side state management'
    noServerPersistence: 'No user data storage (currently)'
    temporarySessions: 'Session-based interactions'
  }
  
  securityMeasures: {
    httpsOnly: 'Secure connection required'
    xssProtection: 'React built-in XSS prevention'
    csrfProtection: 'Next.js CSRF tokens'
  }
}

FUTURE ENHANCEMENTS
===================

Planned Features:
interface FutureEnhancements {
  realTimeChat: {
    websockets: 'Real-time message delivery'
    presenceIndicators: 'Live online status'
    typingIndicators: 'Show when users are typing'
  }
  
  matchmaking: {
    preferenceBasedMatching: 'Smart user pairing'
    locationAwareness: 'Geographic proximity'
    interestAlignment: 'Preference-based suggestions'
  }
  
  mediaSharing: {
    imageUploads: 'Photo sharing in chats'
    voiceMessages: 'Audio message support'
    momentSharing: 'Story-like temporary posts'
  }
  
  gamification: {
    userRatings: 'Community reputation system'
    achievements: 'Interaction milestones'
    premiumFeatures: 'Enhanced user experience'
  }
}

GETTING STARTED
===============

Development Setup:
# Install dependencies
npm install

# Start development server
npm run dev

# Open browser to
http://localhost:3000

# Build for production
npm run build

Key Development Commands:
# Type checking
npx tsc --noEmit

# Linting
npm run lint

# Build verification
npm run build && npm start

SUMMARY
=======

The NoWrong webapp is a sophisticated anonymous chat application that prioritizes user privacy while providing a rich, interactive experience. Built with modern React patterns and Next.js 15, it features:

- Comprehensive onboarding that captures user preferences without compromising privacy
- Rich profile system with visual elements and detailed user information
- Real-time chat capabilities with WhatsApp-inspired UI/UX
- Mobile-first design optimized for all device sizes
- Anonymous architecture that protects user identity
- Extensible codebase ready for future enhancements

The application successfully balances sophisticated functionality with user privacy, creating an engaging platform for anonymous intimate conversations.